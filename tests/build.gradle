plugins {
    id 'java'
    id 'application'
    id 'jacoco'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.agrona:agrona:1.21.2'
    implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.3'

    // Websocket tests
    testImplementation 'org.java-websocket:Java-WebSocket:1.5.2'
    testImplementation 'org.slf4j:slf4j-simple:1.7.32'

    // GraalVM to run JS in Java 
    implementation 'org.graalvm.js:js:23.0.5'
    implementation 'org.graalvm.js:js-scriptengine:23.0.5'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

sourceSets {
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

jacoco {
    toolVersion = "0.8.12"
}

application {
    mainClass = 'smoke.App'
}

test {
    useJUnitPlatform()

    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }    

    systemProperty "TEST", System.getProperty("TEST")

    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        html.required = true
    }

    classDirectories.setFrom(fileTree(dir: "$buildDir/classes/java/main", includes: ["**/*.class"]))
    sourceDirectories.setFrom(files(['src/main/java']))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: ["jacoco/test.exec"]))

    additionalClassDirs = files("$buildDir/classes/java/test")
}

task printTestClasspath {
    doLast {
        println sourceSets.test.runtimeClasspath.asPath
    }
}
