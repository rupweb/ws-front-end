plugins {
    id 'java'
    id 'application'
    id 'jacoco'
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'

    // Aeron
    implementation 'io.aeron:aeron-client:1.46.5'
    implementation 'io.aeron:aeron-driver:1.46.5'
    implementation 'org.agrona:agrona:1.23.1'

    // SBE helpers
    implementation files('../../libs/ws-shared-1.0.1.jar')     

    // Websockets implementation 
    implementation 'io.netty:netty-all:4.1.114.Final'
    implementation 'io.netty:netty-codec-http:4.1.114.Final'
    implementation 'io.netty:netty-codec-http2:4.1.114.Final' 

    // Database persistence
    implementation 'org.xerial:sqlite-jdbc:3.46.1.0'

    implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.3'
    implementation 'com.google.guava:guava:31.1-jre'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'app.App'
}

jacoco {
    toolVersion = "0.8.12"
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

run {
    jvmArgs = [
        '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
        '--add-opens', 'java.base/java.nio=ALL-UNNAMED'
    ]
}

test {
    useJUnitPlatform()

    // JVM forks
    forkEvery = 1
    maxParallelForks = 1

    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }

    systemProperty "TEST", System.getProperty("TEST")

    // HTML report
    reports {
        html {
            enabled true
        }
    }

    finalizedBy jacocoTestReport 
}

allprojects {
    task printAllDependencies(type: DependencyReportTask) {}
}

task createJar(type: Jar) {
    archiveBaseName = 'backend-classes'
    from sourceSets.main.output
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '8.8'
    distributionType = Wrapper.DistributionType.ALL
}
