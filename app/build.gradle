plugins {
    id 'java'
    id 'application'
    id 'jacoco'
}

repositories {
    mavenCentral()
    maven {
        url = "https://maven.pkg.github.com/rupweb/ws-packages"
        credentials {
            username = findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
            password = findProperty("gpr.token") ?: System.getenv("MY_TOKEN")
        }
    }
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'

    // Aeron
    implementation 'io.aeron:aeron-client:1.46.5'
    implementation 'io.aeron:aeron-driver:1.46.5'
    implementation 'org.agrona:agrona:1.23.1'

    // SBE helpers
    implementation 'rupweb:ws-shared:1.0.24'

    // Websockets implementation 
    implementation 'io.netty:netty-all:4.1.114.Final'
    implementation 'io.netty:netty-codec-http:4.1.114.Final'
    implementation 'io.netty:netty-codec-http2:4.1.114.Final' 

    // Database persistence
    implementation 'org.xerial:sqlite-jdbc:3.46.1.0'

    implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.3'
    implementation 'com.google.guava:guava:31.1-jre'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'app.WsFrontEnd'

    applicationDefaultJvmArgs = [
        '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED',
        '--add-exports=java.base/sun.nio.ch=ALL-UNNAMED'
    ]
}

jacoco {
    toolVersion = "0.8.12"
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Required for aeron unsafe access
run {
    jvmArgs = [
        '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
        '--add-opens', 'java.base/java.nio=ALL-UNNAMED'
    ]
}

test {
    useJUnitPlatform()

    jvmArgs = [
        '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED',
        '--add-exports=java.base/sun.nio.ch=ALL-UNNAMED'
    ]

    // JVM forks
    forkEvery = 1
    maxParallelForks = 1

    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }

    systemProperty "TEST", System.getProperty("TEST")

    // HTML report
    reports {
        html {
            enabled true
        }
    }

    finalizedBy jacocoTestReport 
}

allprojects {
    task printAllDependencies(type: DependencyReportTask) {}
}

task createJar(type: Jar) {
    archiveBaseName = 'backend-classes'
    from sourceSets.main.output
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '8.8'
    distributionType = Wrapper.DistributionType.ALL
}

task fatJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': application.mainClass.get()
    }
    archiveBaseName = 'ws-front-end'

    // Ensure local classes and resources are included first
    from {
        sourceSets.main.output
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    exclude '**/log4j2.xml' // Ensure logging is configurable externally

    with jar
}

task copyJar(type: Copy) {
    dependsOn fatJar
    from "$buildDir/libs"  // Source
    into "../../libs/fatjar" // Destination
    include '**/*.jar'
}

task copyConfig(type: Copy) {
    doFirst {
        if (file("$projectDir/config").exists()) {
            println "Copying config directory..."
        } else {
            println "Config directory not found. Skip copyConfig."
            throw new StopExecutionException()
        }
    }
    from "$projectDir/config"  // Source
    into "../../libs/fatjar/config/${fatJar.archiveBaseName.get()}" // Destination
}

// Ensure copyJar runs after fatJar
tasks.named('jar') {
    finalizedBy(copyJar)
}

tasks.named('copyJar') {
    finalizedBy(copyConfig)
}

// Ensure copyJar runs first
['distZip', 'distTar', 'startScripts', 'compileTestJava'].each { taskName ->
    tasks.named(taskName) {
        dependsOn copyJar, copyConfig
    }
}

tasks.withType(Test) {
    doFirst {
        def isGithubActions = System.getenv('GITHUB_ACTIONS') != null

        def propertiesFile = isGithubActions
            ? file("app/src/test/resources/application-build.properties").absolutePath
            : file("src/test/resources/application.properties").absolutePath

        systemProperty "app.config.file", propertiesFile
        println "Using app.config.file: " + propertiesFile
    }
}
